{"version":3,"sources":["assetes/images/logo.png","assetes/images/loading.svg","components/elements/welcome.js","components/commons/Input.js","components/commons/Button.js","components/commons/Loading.js","utilitis/history.js","utilitis/Api/config.js","utilitis/request.js","stores/UserLogin.js","stores/FarmerModel.js","stores/ProductModel.js","stores/OrderModel.js","stores/BuyerModel.js","stores/index.js","stores/CompanyModel.js","components/screens/Login.js","components/prints/index.js","components/screens/Order.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["module","exports","withStyles","root","flexGrow","paddingTop","title","color","margin","subTitle","fontSize","padding","fontWeight","classes","Fragment","className","Input","type","placeholder","value","onChange","name","input","defaultProps","border","width","outline","borderRadius","background","fontFamily","Button","text","formBtn","boxShadow","Loading","src","loading","alt","history","createBrowserHistory","instance","axios","create","baseURL","timeout","mode","headers","request","method","url","data","Promise","resolve","reject","a","async","response","Axios","this","send","LoginStore","types","model","optional","boolean","isLogin","userName","string","password","writer","writerId","number","error","actions","self","loginRequest","changeLoading","post","UserName","Password","then","updateWriter","id","push","changeLogin","ChangeError","catch","setTimeout","UpdateUser","UpdatePassword","status","FarmerContent","code","tel","address","description","isActive","isSale","isBuy","FarmerModel","farmers","array","views","getfarmers","values","updateFarmers","json","map","item","loadFarmers","flow","window","fetch","res","ProductContent","codePeople","titlePeople","codeProduct","titleProduct","peopleId","productId","date","price","isDelete","cost","ProductModel","products","cuurentFarmer","filter","product","updateProducts","loadProducts","updateCuurentFarmer","OrderModel","farmer","farmerId","maybeNull","weight","buyer","buyerId","parseFloat","total","dateNow","Date","day","getDate","slice","month","getMonth","year","getFullYear","emptyForm","sale","PeopleID","BuyID","Serial","Price","Weight","Count","SumPrice","isResive","IsDelete","isStop","Description","Resive","Discount","Result","userId","body","JSON","stringify","console","log","updateFarmer","Number","updateProduct","updatePrice","updateWeight","updateNumber","updateBuyer","getSnapshot","BuyerContent","stores","BuyerModel","buyers","updateBuyers","loadBuyers","CompanyModel","companyName","companyAddress","companyTel","printType","companyInformation","company","updateCompany","StoreContext","createContext","height","inputLabel","right","left","logo","marginTop","form","display","flexDirection","alignContent","justifyContent","observer","props","useContext","isLoading","useEffect","Grid","container","xs","sm","Box","p","pr","onSubmit","e","preventDefault","alignItems","target","Print","size","user","factorNumber","count","totalSumation","colSpan","React","Component","flex","paddingRight","select","PrintBtn","buttonPrint","lgPrintRef","useRef","mdPrintRef","smPrintRef","trigger","content","current","pb","element","selectedIndex","getAttribute","hidden","key","productPrice","toString","mt","ref","App","exact","path","component","Login","Order","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","muiTheme","createMuiTheme","overrides","MuiInputLabel","backgroundColor","ReactDOM","render","theme","document","getElementById","deferredPrompt","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","btnAdd","style","prompt","userChoice","choiceResult","outcome"],"mappings":"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","file":"static/js/main.02fff08c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.879c0609.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.4b9b8f4d.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n        paddingTop: '4em'\n    },\n    title: {\n        color:'#fff',\n        margin:0\n    },\n    subTitle:{\n\n        fontSize: '15px',\n        margin: 0,\n        padding: '.5em 1em',\n        color: '#fff',\n        fontWeight:'500'\n    }\n};\nconst Welcome = ({ title, subTitle, classes})=>{\n    return(\n        <React.Fragment>\n            <h1 className={classes.title}>{title}</h1>\n            <h2 className={classes.subTitle}>{subTitle}</h2>\n        </React.Fragment>\n    );\n};\nWelcome.propTypes ={\n    title: PropTypes.string.isRequired,\n    subTitle: PropTypes.string.isRequired,\n    classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(Welcome);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n\n    input: {\n        border: '1px solid #7e64ab',\n        padding: '1em',\n        margin: '.4em',\n        width: '19em',\n        outline: 'none',\n        borderRadius: '7px',\n        background: 'rgba(248, 247, 250, 0.53)',\n        fontFamily: 'Vazir',\n        '&:focus':{\n            background:'#fff'\n        }\n    },\n    \n\n\n};\nconst Input = ({\n    type, placeholder, value, onChange, name, classes\n}) => {\n    return (\n        <input\n            className={classes.input}\n            type={type}\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            name={name}\n        />\n    );\n};\nInput.defaultProps = {\n    name: '',\n};\nInput.propTypes = {\n    classes: PropTypes.object.isRequired,\n    type: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.node.isRequired,\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string,\n\n};\nexport default withStyles(styles)(Input);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n    formBtn: {\n        background: '#fff',\n        color: ' #7E64AB',\n        fontFamily: 'Vazir',\n        width: '90%',\n        border: 'none',\n        borderRadius: '30px',\n        padding: '.8em 1em',\n        fontSize: '20px',\n        fontWeight: '600',\n        boxShadow: '1px 12px 13px rgba(126, 100, 171, 0.5490196078431373)',\n        outline:'none',\n        margin:'0 auto'\n\n    }\n};\n\nconst Button = ({ type, text,classes }) => {\n    return (\n        <button className={classes.formBtn} type={type}>\n            {text}\n        </button>\n    );\n};\nButton.defaultProps = {\n    type: 'button',\n};\nButton.propTypes = {\n    classes: PropTypes.object.isRequired,\n    type: PropTypes.string,\n    text: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n    ]).isRequired,\n};\n\nexport default withStyles(styles)(Button);\n","import React from 'react';\nimport loading from '../../assetes/images/loading.svg';\n\nconst Loading = () => {\n    return <img src={loading} alt=\"loading\" />;\n};\n\nexport default Loading;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import axios from 'axios';\n\nexport const instance = axios.create({\n    baseURL: 'https://shop.narmamer.com/api',\n    timeout: 5000,\n    mode:'no-cors',\n    headers: {\n        'Content-Type' : 'application/json',\n    },\n});\n\n\nexport default instance;\n","/* eslint-disable no-async-promise-executor */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable arrow-body-style */\nimport Axios from './Api/config';\n\nclass Request {\n    send(method, url, data) {\n        return new Promise(async (resolve, reject) => {\n            let response = null;\n            try {\n                response = await Axios({ method, url, data });\n                resolve(response);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    get(url) {\n        return this.send('get', url);\n    }\n\n    post(url, data) {\n        return this.send('post', url, data);\n    }\n\n    delete(url, data) {\n        return this.send('delete', url, data);\n    }\n\n    put(url, data) {\n        return this.send('put', url, data);\n    }\n}\n\nconst request = new Request();\nexport default request;\n","\nimport { types} from 'mobx-state-tree';\nimport history from '../utilitis/history';\nimport request from '../utilitis/request';\n\nconst loginStore = types.model('loginStore', {\n    loading: types.optional(types.boolean, false),\n    isLogin: types.optional(types.boolean, false),\n    userName:types.optional(types.string,''),\n    password: types.optional(types.string, ''),\n    writer: types.optional(types.string, ''),\n    writerId: types.optional(types.number, 0),\n    error: types.optional(types.string, ''),\n})\n    .actions(self => ({\n        loginRequest(userName,password) {\n            self.userName = userName;\n            self.password = password;\n            this.changeLoading(true);\n        \n            return new Promise((resolve, reject) => {\n                request.post('/Login',\n                    {\n                        UserName:userName,\n                        Password:password\n                    }).then(( {data} ) => {\n\n                    if(data!==false){\n                        self.updateWriter(data.title,data.id);\n                        history.push('/order');\n                        self.changeLogin(true);\n                    } else{\n                        self.ChangeError('نێوی بەکارهێنەر یا وشەی نهێنی هەڵەیە');\n                        self.changeLogin(false);\n                    }\n                })\n                    .catch(error => {\n                        reject(error);\n                        self.ChangeError('کێشەی پەیوەندی دەگەڵ سێرڤێر');\n                        this.changeLoading(false);\n                    });\n\n                setTimeout(() => {\n                    this.changeLoading(false);\n                    resolve();\n                }, 3000);\n            });\n        },\n        UpdateUser(value) {\n            self.userName = value;\n            self.ChangeError('');\n        },\n        UpdatePassword(value) {\n            self.password = value;\n            self.ChangeError('');\n        },\n        updateWriter(name,id){\n            self.writer =name;\n            self.writerId=id;\n        },\n\n        changeLoading(value = false) {\n            self.loading = value;\n        },\n        ChangeError(error) {\n            self.error = error;\n            self.changeLoading(false);\n        },\n        changeLogin(status){\n            self.isLogin=status;\n        }\n    }));\nconst LoginStore = loginStore.create();\n\n\nexport default LoginStore;\n","/* eslint-disable arrow-body-style */\n/* eslint-disable no-param-reassign */\n\nimport { types,flow  } from 'mobx-state-tree';\nimport { values } from \"mobx\";\nconst FarmerContent = types.model(\"farmer\", {\n    id: types.number,\n    code:types.number,\n    title: types.optional(types.string,''),\n    tel:  types.optional(types.string,''),\n    address: types.optional(types.string,''),\n    description:  types.optional(types.string,''),\n    type: types.number,\n    isActive: types.boolean,\n    isSale: types.boolean,\n    isBuy: types.boolean\n\n});\n\nconst farmerModel = types.model('farmerModel', {\n    farmers: types.optional(types.array(FarmerContent),[]),\n})\n    .views(self => ({\n        getfarmers() {\n            return values(self.farmers);\n        }\n    }))\n    .actions(self => ({\n        updateFarmers(json) {\n            let farmers=[];\n            json.map(item => {\n                farmers = [ ...farmers, item ];\n            });\n            self.farmers = [ ...farmers ];\n\n        },\n\n        loadFarmers: flow(function* loadFarmers(){\n            const res = yield window.fetch('https://shop.narmamer.com/api/people/1', {\n                method: 'GET',\n            });\n            const json = yield res.json();\n            self.updateFarmers(json);\n        })\n\n    }));\n\nconst FarmerModel = farmerModel.create();\nexport default FarmerModel;\n","/* eslint-disable arrow-body-style */\n/* eslint-disable no-param-reassign */\n\nimport { types, flow, getSnapshot } from 'mobx-state-tree';\n\nconst ProductContent = types.model(\"product\", {\n    id: types.number,\n    codePeople: types.number,\n    titlePeople: types.optional(types.string, ''),\n    codeProduct: types.number,\n    titleProduct: types.optional(types.string, ''),\n    peopleId: types.number,\n    productId: types.number,\n    date: types.optional(types.string, ''),\n    price: types.number,\n    isActive: types.boolean,\n    isDelete: types.boolean,\n    cost: types.number\n});\n\nconst productModel = types.model('productModel', {\n    products: types.optional(types.array(ProductContent), []),\n    cuurentFarmer: types.optional(types.string, ''),\n\n})\n    .views(self => ({\n        price(id) {\n            // return self.products.map(item => {\n            //     return item.price;\n            // });\n            let currentProduct = self.products.filter(product => product.id == id);\n            return currentProduct[0].price;\n\n        },\n    }))\n    .actions(self => ({\n        \n        updateProducts(json) {\n            let products = [];\n            json.map(item => {\n                products = [ ...products,item ];\n            });\n            self.products = [ ...products ];\n        },\n\n        loadProducts: flow(function* loadFarmers() {\n            const res = yield window.fetch(`https://shop.narmamer.com/api/buy/${self.cuurentFarmer}`, {\n                method: 'GET',\n            });\n            const json = yield res.json();\n            self.updateProducts(json);\n        }),\n        updateCuurentFarmer(id){\n            self.cuurentFarmer = id;\n        }\n\n    }));\n\nconst ProductModel = productModel.create();\n\nexport default ProductModel;\n","import { types ,flow,getSnapshot} from 'mobx-state-tree';\n\nconst orderModel = types.model('orderModel', {\n    farmer:types.optional(types.string,''),\n    farmerId:types.optional(types.number,0),\n    product: types.optional(types.string, ''),\n    productId:types.optional(types.number,0),\n    price: types.maybeNull(types.string),\n    weight: types.maybeNull(types.string),\n    number: types.maybeNull(types.string),\n    buyer: types.optional(types.string, ''),\n    buyerId: types.optional(types.number, 0),\n    loading: types.optional(types.boolean, false),\n    error: types.optional(types.string, ''),\n\n})\n    .views(self => ({\n        get total() {\n            if (self.price && self.weight != null){\n                return parseFloat(self.price) * parseFloat(self.weight);\n            }else{\n                return 0;\n            }\n        },\n        get totalSumation(){\n            if (self.price && self.weight != null) {\n                return self.total / 100 * 15 + self.total;\n            } else {\n                return 0;\n            }\n            \n        },\n        get date(){\n            const dateNow = new Date();\n            const day = (\"0\" + dateNow.getDate()).slice(-2);\n            const month = (\"0\" + (dateNow.getMonth() + 1)).slice(-2);\n            const year = dateNow.getFullYear();\n            let date = `${year}-${month}-${day}`;\n            return date;\n        }\n    }))\n    .actions(self => ({\n\n        emptyForm() {\n            self.price = '';\n            self.weight='';\n            self.number='';\n        },\n        sale: flow(function* sale(writerId) {\n            const data = {\n                PeopleID:self.farmerId,\n                BuyID: self.productId,\n                Serial:0,\n                Date: self.date,\n                Price:parseFloat(self.price),\n                Weight: parseFloat(self.weight),\n                Count: parseFloat(self.number),\n                SumPrice: self.total,\n                isResive:true,\n                IsDelete:false,\n                isStop:false,\n                Description:'',\n                Resive:0 ,\n                Discount:0,\n                Result:0,\n                userId: writerId\n            };\n            const res = yield window.fetch(`https://shop.narmamer.com/api/sales`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            });\n            const json = yield res.json();\n            console.log(json);\n            console.log(JSON.stringify(data));\n        }),\n        updateFarmer(farmer,id){\n            self.farmer=farmer;\n            self.farmerId = Number(id);\n        },\n        updateProduct(product, id) {\n            self.product = product;\n            self.productId = Number(id);\n        },\n        updatePrice(price){\n            self.price =price;\n        },\n        updateWeight(weight) {\n            self.weight = weight;\n        },\n        updateNumber(number) {\n            self.number = number;\n        },\n        updateBuyer(buyer,id){\n            self.buyer=buyer;\n            self.buyerId = Number(id);\n            console.log(getSnapshot(OrderModel));\n\n        },\n        changeLoading(value = false) {\n            self.loading = value;\n        },\n        ChangeError(error) {\n            self.error = error;\n            self.changeLoading(false);\n        }, \n    }));\n\nconst OrderModel = orderModel.create();\n\n\nexport default OrderModel;\n","import { types, flow } from 'mobx-state-tree';\nconst BuyerContent = types.model(\"buyer\", {\n    id: types.number,\n    code: types.number,\n    title: types.optional(types.string, ''),\n    tel: types.optional(types.string, ''),\n    address: types.optional(types.string, ''),\n    description: types.optional(types.string, ''),\n    type: types.number,\n    isActive: types.boolean,\n    isSale: types.boolean,\n    isBuy: types.boolean\n\n});\n\nconst buyerModel = types.model('buyerModel', {\n    buyers: types.optional(types.array(BuyerContent), []),\n})\n\n    .actions(self => ({\n        updateBuyers(json) {\n            let buyers=[];\n            json.map(item => {\n                buyers = [ ...buyers, item ];\n            });\n            self.buyers = [ ...buyers ];\n        },\n\n        loadBuyers: flow(function* loadBuyers() {\n            const res = yield window.fetch('https://shop.narmamer.com/api/people/2', {\n                method: 'GET',\n            });\n            const json = yield res.json();\n            self.updateBuyers(json);\n        })\n\n    }));\n\nconst BuyerModel = buyerModel.create();\n\n\nexport default BuyerModel;\n","import { createContext } from 'react';\nimport LoginStore from './UserLogin';\nimport FarmerModel from './FarmerModel';\nimport ProductModel from './ProductModel';\nimport OrderModel from './OrderModel';\nimport BuyerModel from './BuyerModel';\nimport CompanyModel from './CompanyModel';\n\nconst stores = {\n    LoginStore,\n    FarmerModel,\n    ProductModel,\n    OrderModel,\n    BuyerModel,\n    CompanyModel\n};\n\nconst StoreContext = createContext(stores);\nexport default StoreContext;\n","\nimport { types, flow } from 'mobx-state-tree';\n\nconst companyModel = types.model('companyModel', {\n    companyName: types.optional(types.string, ''),\n    companyAddress: types.optional(types.string, ''),\n    companyTel: types.optional(types.string, ''),\n    printType: types.optional(types.number,0),\n})\n    .actions(self => ({\n\n        companyInformation: flow(function* companyInformation() {\n            const res = yield window.fetch(`https://shop.narmamer.com/api/company/1`, {\n                method: 'GET',\n            });\n            const json = yield res.json();\n            const company = json[0];\n            self.updateCompany(company.title, company.address, company.tel, company.printType);\n        }),\n        updateCompany(name,address,tel,printType){\n            self.companyName = name;\n            self.companyAddress= address;\n            self.companyTel=tel;\n            self.printType = printType;\n        }\n\n    }));\n\nconst CompanyModel = companyModel.create();\n\n\nexport default CompanyModel;\n","import React, { useContext, useEffect } from 'react';\nimport { observer } from 'mobx-react';\n\nimport Welcome from '../elements/welcome';\nimport Input from '../commons/Input';\nimport Button from '../commons/Button';\nimport Loading from '../commons/Loading';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport logo from '../../assetes/images/logo.png';\nimport StoreContext from '../../stores';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n        height: '100vh',\n    },\n    inputLabel: {\n        right: 0,\n        left: 'auto',\n        fontFamily: 'Vazir'\n\n    },\n    logo: {\n        width: '10em',\n        marginTop: '1em',\n    },\n    error:{\n        color:'#ff1100'\n    },\n    form:{\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'space-between',\n        justifyContent: 'space-around',\n        height:'70%',\n    },\n\n\n};\nconst Login = props => {\n    const { classes } = props;\n    const { LoginStore, CompanyModel} = useContext(StoreContext);\n    const isLoading = LoginStore.loading;\n\n    useEffect(() => {\n        CompanyModel.companyInformation();\n    }, []);\n    const handelChangeUsername = e => {\n        LoginStore.UpdateUser(e.target.value);\n    };\n\n    const handelChangePassword = e => {\n        LoginStore.UpdatePassword(e.target.value);\n    };\n    const handelSubmit = e => {\n        e.preventDefault();\n        const userName = LoginStore.userName;\n        const password = LoginStore.password;\n        if (userName && password !== null || userName && password !== ''){\n            LoginStore.loginRequest(userName, password);\n        } else{\n            LoginStore.ChangeError('نێوی بەکارهێنەر یا وشەی نهێنی بنوسە');\n        }\n    };\n    return (\n        <div>\n            <div className={classes.root}>\n                <Grid container>\n                    <Grid item xs={12} sm={12}>\n                        <Box display=\"flex\" justifyContent=\"center\">\n                            <img className={classes.logo} src={logo} />\n                        </Box>\n                        <Box p={0} pr={4}>\n                            <Welcome title=\"بەخێرهاتن\" subTitle={CompanyModel.companyName} />\n                        </Box>\n\n                        <form className={classes.form} onSubmit={handelSubmit}>\n                            <Box display=\"flex\" flexDirection=\"column\"\n                                justifyContent=\"center\"\n                                alignItems=\"center\"\n                            >\n                                <Input type=\"text\" placeholder=\"نێوی بەکارهێنەر\" value={LoginStore.userName} onChange={handelChangeUsername} />\n                                <Input type=\"password\" placeholder=\"وشەی نەهێنی\" value={LoginStore.password} onChange={handelChangePassword} />\n                                <span className={classes.error}>{LoginStore.error}</span>\n                            </Box>\n                            <Button type=\"submit\" text={isLoading ? <Loading /> : 'چوونە ژوور'} />\n                            <Button type=\"button\" id=\"btnAdd\" text={'داگرتن'} />\n\n                        </form>\n                    </Grid>\n                </Grid>\n            </div>\n\n        </div>\n    );\n};\nLogin.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(observer(Login));\n","import React from 'react';\nimport './print.css';\nimport PropTypes from 'prop-types';\nimport logo from '../../assetes/images/logo.png';\n\nimport Box from '@material-ui/core/Box';\n\nclass Print extends React.Component {\n    render() {\n        const { size, title, tel, user, factorNumber, date, product, price, count, weight, farmer, buyer, address, total, totalSumation} = this.props;\n        return (\n            <div>\n                {size == 'lg' ? <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <img className=\"logo\" src={logo} />\n                </Box> : ''}\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                    <h1 className=\"title\">{title}</h1>\n                    <h2 className=\"subTitle\">فرۆشتن</h2>\n                </Box>\n\n                <Box p={2} display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\" >\n                    <span className=\"telephone\">{tel}</span>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\" >\n                    <span className=\"telephone\">کاتب: {user}</span>\n                    <span className=\"telephone\">ژ.پسوله: {factorNumber}</span>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\" >\n                    <span className=\"telephone\">به‌روار: {date}</span>\n                </Box>\n                {size == \"sm\" ? <table className=\"table\">\n                    <tbody>\n                        <tr>\n                            <td>بابەت:</td>\n                            <td>{product}</td>\n                            <td>نرخ:</td>\n                            <td>{price}</td>\n                        </tr>\n                        <tr>\n                            <td>دانه:</td>\n                            <td>{count}</td>\n                            <td>کێش:</td>\n                            <td>{weight}</td>\n                        </tr>\n                        <tr>\n                            <td>جوتیار:</td>\n                            <td>{farmer}</td>\n\n                            <td>گشتی:</td>\n                            <td>{total}</td>\n                        </tr>\n                        <tr>\n                            <td>کریار:</td>\n                            <td>{buyer}</td>\n                            <td>کۆی گشتی:</td>\n                            <td>{totalSumation}</td>\n                        </tr>\n                        <tr >\n                            <td>شوێن::</td>\n                            <td colSpan=\"4\">{address}</td>\n                        </tr>\n                    </tbody>\n                </table> : <table className=\"table\">\n                    <tbody>\n                        <tr>\n                            <td>بابەت:</td>\n                            <td>{product}</td>\n                        </tr>\n                        <tr>\n                            <td>نرخ:</td>\n                            <td>{price}</td>\n                        </tr>\n                        <tr>\n                            <td>کێش kg:</td>\n                            <td>{weight}</td>\n                        </tr>\n                        <tr>\n                            <td>گشتی:</td>\n                            <td>{total}</td>\n                        </tr>\n                        <tr>\n                            <td>کۆی گشتی:</td>\n                            <td>{totalSumation}</td>\n                        </tr>\n                        <tr>\n                            <td>دانه:</td>\n                            <td>{count}</td>\n                        </tr>\n                        <tr>\n                            <td>جوتیار:</td>\n                            <td>{farmer}</td>\n                        </tr>\n                        <tr>\n                            <td>کڕیار:</td>\n                            <td>{buyer}</td>\n                        </tr>\n                        <tr>\n                            <td>شوێن:</td>\n                            <td>{address}</td>\n                        </tr>\n                    </tbody>\n                </table>}\n            </div>\n        );\n    }\n}\nPrint.defaultProps = {\n    total: 0,\n    totalSumation: 0,\n    price: '',\n    count: '',\n    weight: '', \n};\nPrint.propTypes = {\n    size: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tel: PropTypes.string.isRequired, \n    user: PropTypes.string.isRequired, \n    factorNumber: PropTypes.string.isRequired, \n    date: PropTypes.string.isRequired, \n    product: PropTypes.string.isRequired, \n    price: PropTypes.string,\n    count: PropTypes.string,\n    weight: PropTypes.string, \n    farmer: PropTypes.string.isRequired, \n    buyer: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    total: PropTypes.number,\n    totalSumation: PropTypes.number,\n};\nexport default Print;","import React, { useContext,useRef,useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport ReactToPrint from \"react-to-print\";\nimport PropTypes from 'prop-types';\nimport history from '../../utilitis/history';\nimport StoreContext from '../../stores';\nimport Input from '../commons/Input';\n// import Button from '../commons/Button';\nimport Loading from '../commons/Loading';\nimport Print from '../prints';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport logo from '../../assetes/images/logo.png';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n        height: '100vh',\n    },\n    inputLabel: {\n        right: 0,\n        left: 'auto',\n        fontFamily: 'Vazir'\n\n    },\n    logo: {\n        width: '4em',\n        margin: 0,\n    },\n    title:{\n        flex:1,\n        color:'#fff',\n        margin:0,\n        paddingRight: '1.5em',\n    },\n    select:{\n        border: '1px solid #7e64ab',\n        padding: '1em',\n        margin: '.4em',\n        width: '21.5em',\n        outline: 'none',\n        borderRadius: '7px',\n        background: 'rgba(248, 247, 250, 0.53)',\n        fontFamily: 'Vazir',\n        '&:focus': {\n            background: '#fff'\n        }\n    },\n    PrintBtn: {\n        background: '#fff',\n        color: ' #7E64AB',\n        fontFamily: 'Vazir',\n        width: '90%',\n        border: 'none',\n        borderRadius: '30px',\n        padding: '.8em 1em',\n        fontSize: '20px',\n        fontWeight: '600',\n        boxShadow: '1px 12px 13px rgba(126, 100, 171, 0.5490196078431373)',\n        outline: 'none',\n        margin: '1em auto'\n    },\n    error: {\n        color: '#ff1100'\n    }\n\n};\nconst Order = props => {\n\n    const { classes } = props;\n    const { FarmerModel, ProductModel, OrderModel, BuyerModel, LoginStore, CompanyModel} = useContext(StoreContext);\n    const lgPrintRef = useRef();\n    const mdPrintRef = useRef();\n    const smPrintRef = useRef();\n    const title = CompanyModel.companyName;\n    const tel = CompanyModel.companyTel;\n    const printType=CompanyModel.printType;\n    const user = LoginStore.writer;\n    const factorNumber = \"0\";\n    const date = OrderModel.date;\n    const product = OrderModel.product;\n    const price = OrderModel.price;\n    const count = OrderModel.number;\n    const weight = OrderModel.weight;\n    const farmer = OrderModel.farmer;\n    const buyer = OrderModel.buyer;\n    const address = CompanyModel.companyAddress;\n    const total = OrderModel.total;\n    const totalSumation = OrderModel.totalSumation;\n    const isLoading = OrderModel.loading;\n    const writerId = LoginStore.writerId;\n    // const isLogin = LoginStore.isLogin;\n    // if (isLogin == false) {\n    //     history.push('/');\n    // }\n    let buttonPrint;\n    if (printType==0){\n        buttonPrint = <ReactToPrint\n            trigger={() => <button className={classes.PrintBtn} type=\"submit\">{isLoading ? <Loading /> : 'چاپی گەورە'}</button>}\n            content={() => lgPrintRef.current}\n        />;\n    } else if (printType==1){\n        buttonPrint = <ReactToPrint\n            trigger={() => <button className={classes.PrintBtn} type=\"submit\">{isLoading ? <Loading /> : 'چاپی ناوەندی'}</button>}\n            content={() => mdPrintRef.current}\n        />;\n    } else if (printType == 2){\n        buttonPrint = <ReactToPrint\n            trigger={() => <button className={classes.PrintBtn} type=\"submit\">{isLoading ? <Loading /> : 'چاپی گچکە'}</button>}\n            content={() => smPrintRef.current}\n        />; \n    } else{\n        buttonPrint=<span>error</span>;\n    }\n    useEffect(() => {\n        FarmerModel.loadFarmers();\n        BuyerModel.loadBuyers();\n    }, []);\n    const handelChangeFarmer=e=>{\n        e.preventDefault();\n        const element=e.target[e.target.selectedIndex];\n        const id = element.getAttribute('name');\n        ProductModel.updateCuurentFarmer(id);\n        OrderModel.updateFarmer(element.value,id);\n        ProductModel.loadProducts();\n    };\n    const handelChangeProduct=e=>{\n        e.preventDefault();\n        const element = e.target[e.target.selectedIndex];\n        const id = element.getAttribute('name');\n        OrderModel.updateProduct(element.value, id);\n        let productPrice = ProductModel.price(id);\n        OrderModel.updatePrice(productPrice.toString());\n    };\n    const handelChanegPrice = e => {\n        e.preventDefault();\n        OrderModel.updatePrice(e.target.value);\n    };\n    const handelChanegWeight = e => {\n        e.preventDefault();\n        OrderModel.updateWeight(e.target.value);\n\n    };\n    const handelChanegNumber = e => {\n        e.preventDefault();\n        OrderModel.updateNumber(e.target.value);\n    };\n    const handelChangeBuyer=e=>{\n        e.preventDefault();\n        const element = e.target[e.target.selectedIndex];\n        const id = element.getAttribute('name');\n        OrderModel.updateBuyer(element.value, id);\n    };\n    const handelSubmit = e => {\n        e.preventDefault();\n        if (farmer == '' && product == '' && price == '' && weight == '' && count == '' && buyer == '') {\n            OrderModel.ChangeError('تواوی فیلدکان دبیت پر کیوه');\n        } else{\n            OrderModel.sale(writerId);\n            OrderModel.emptyForm();\n            FarmerModel.loadFarmers();\n            BuyerModel.loadBuyers();\n            CompanyModel.companyInformation();\n        }\n    };\n    return (\n        <div>\n            <div className={classes.root}>\n                <Grid container>\n                    <Grid item xs={12} sm={12}>\n                        <Box p={2} pb={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                            <img className={classes.logo} src={logo} />\n                            <h1 className={classes.title}>فرۆش</h1>\n                        </Box>\n                        <form onSubmit={handelSubmit}>\n                            <Box display=\"flex\" flexDirection=\"column\"\n                                justifyContent=\"center\"\n                                alignItems=\"center\"\n                            >\n                                <select onChange={handelChangeFarmer} className={classes.select}>\n                                    <option hidden>که‌س</option>\n                                    {\n                                        FarmerModel.farmers.map(item => {\n                                            return (<option name={item.id} value={item.title} key={item.id}>{item.title}</option>);\n                                        })\n                                    }\n                                </select>\n                                <select onChange={handelChangeProduct} className={classes.select}>\n                                    <option hidden>کاڵا یا بەرهەم</option>\n                                    {\n                                        ProductModel.products.map(item => {\n                                            return (<option name={item.id} value={item.titleProduct} key={item.id}>{item.titleProduct}</option>);\n                                        })\n                                    }\n                                </select>\n                                <Input type=\"number\" placeholder=\"نرخ\" value={OrderModel.price} onChange={handelChanegPrice} />\n                                <Input type=\"number\" placeholder=\"کێش\" value={OrderModel.weight} onChange={handelChanegWeight} />\n                                <Input type=\"number\" placeholder=\"دانه\" value={OrderModel.number} onChange={handelChanegNumber} />\n                                <select onChange={handelChangeBuyer} className={classes.select}>\n                                    <option hidden>کڕیار</option>\n                                    {\n                                        BuyerModel.buyers.map(item => {\n                                            return (<option name={item.id} value={item.title} key={item.id}>{item.title}</option>);\n                                        })\n                                    }\n                                </select>\n                                <span className={classes.error}>{OrderModel.error}</span>\n                            </Box>\n                            <Box display=\"flex\"\n                                justifyContent=\"center\"\n                                alignItems=\"center\"\n                                mt={2}\n                            >   \n                                {buttonPrint}\n                                \n                                \n                            </Box>\n                            \n                            <div className=\"printDisplay\"> \n                                <Print\n                                    size=\"lg\"\n                                    title={title}\n                                    tel={tel}\n                                    user={user}\n                                    factorNumber={factorNumber}\n                                    date={date}\n                                    product={product}\n                                    price={price}\n                                    count={count}\n                                    weight={weight}\n                                    farmer={farmer}\n                                    buyer={buyer}\n                                    address={address}\n                                    total={total}\n                                    totalSumation={totalSumation}\n                                    ref={lgPrintRef} />\n                                <Print \n                                    size=\"md\"\n                                    title={title}\n                                    tel={tel}\n                                    user={user}\n                                    factorNumber={factorNumber}\n                                    date={date}\n                                    product={product}\n                                    price={price}\n                                    count={count}\n                                    weight={weight}\n                                    farmer={farmer}\n                                    buyer={buyer}\n                                    address={address}\n                                    total={total}\n                                    totalSumation={totalSumation}\n                                    ref={mdPrintRef} />\n                            \n                                <Print \n                                    size=\"sm\"\n                                    title={title}\n                                    tel={tel}\n                                    user={user}\n                                    factorNumber={factorNumber}\n                                    date={date}\n                                    product={product}\n                                    price={price}\n                                    count={count}\n                                    weight={weight}\n                                    farmer={farmer}\n                                    buyer={buyer}\n                                    address={address}\n                                    total={total}\n                                    totalSumation={totalSumation}\n                                    ref={smPrintRef} />\n                            </div>\n\n                        </form>\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n};\nOrder.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(observer(Order));\n","import React from 'react';\nimport Login from './components/screens/Login';\nimport Order from './components/screens/Order';\nimport history from './utilitis/history';\nimport { Router, Route } from 'react-router-dom';\nimport Print from './components/prints';\n\nconst App=()=> {\n    return (\n        <Router history={history}>\n            <Route exact path=\"/\" component={Login} />\n            <Route path=\"/order\" component={Order} />\n            <Route path=\"/print\" component={Print} />\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n    var deferredPrompt;\n    var btnAdd = document.getElementById('btnAdd');\n    window.addEventListener('beforeinstallprompt', function (e) {\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      deferredPrompt = e;\n    });\n\n    // Installation must be done by a user gesture! Here, the button click\n    btnAdd.addEventListener('click', (e) => {\n      // hide our user interface that shows our A2HS button\n      btnAdd.style.display = 'none';\n      // Show the prompt\n      deferredPrompt.prompt();\n      // Wait for the user to respond to the prompt\n      deferredPrompt.userChoice\n        .then((choiceResult) => {\n          if (choiceResult.outcome === 'accepted') {\n            console.log('User accepted the A2HS prompt');\n          } else {\n            console.log('User dismissed the A2HS prompt');\n          }\n          deferredPrompt = null;\n        });\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const theme = {\n\n    overrides: {\n        MuiInputLabel: {\n            \n            backgroundColor: 'red'\n            \n        },\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {theme} from './theme.js';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst muiTheme = createMuiTheme(theme);\n\nReactDOM.render(\n\n    <MuiThemeProvider theme={muiTheme}><App /></MuiThemeProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
{"version":3,"sources":["components/elemenets/Header.js","components/elemenets/Navbar.js","components/layouts/index.js","components/screens/home/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","text","padding","spacing","fontSize","textAlign","fontFamily","paper","paddingBottom","paddingTop","discreption","breakpoints","down","Header","classes","CssBaseline","Paper","square","className","Typography","variant","gutterBottom","component","list","marginBottom","subheader","backgroundColor","palette","background","appBar","top","bottom","grow","flexGrow","fabButton","position","zIndex","left","right","margin","button","buttonApp","color","Navbar","AppBar","Toolbar","Button","Fab","aria-label","Refresh","startIcon","GetAppRounded","Layout","children","Container","maxWidth","style","Home","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45c72926.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// eslint-disable-next-line arrow-body-style\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        padding: theme.spacing(2, 2, 0),\r\n        fontSize: 25,\r\n        textAlign: 'center',\r\n        fontFamily: 'Vazir',\r\n    },\r\n    paper: {\r\n        paddingBottom: 20,\r\n        paddingTop: 20,\r\n    },\r\n    discreption: {\r\n        textAlign: 'center',\r\n        fontFamily: 'Vazir',\r\n        [theme.breakpoints.down('md')]: {\r\n            fontSize: 13,\r\n        },\r\n    },\r\n}));\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Paper square className={classes.paper}>\r\n                <Typography className={classes.text} variant=\"h1\" gutterBottom>\r\n                    دریافت رویداد روزانه\r\n                </Typography>\r\n\r\n                <Typography className={classes.discreption} component=\"p\">\r\n                    دریافت رویداد های روزانه‌ی تقویم های هجری و شمسی و اطلاع از تعطیلی آن\r\n                </Typography>\r\n            </Paper>\r\n        </>\r\n    );\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n AppBar, Toolbar, Button, Fab,\r\n} from '@material-ui/core';\r\nimport { GetAppRounded, Refresh } from '@material-ui/icons';\r\n\r\n// eslint-disable-next-line arrow-body-style\r\nconst useStyles = makeStyles((theme) => ({\r\n    list: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    subheader: {\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    appBar: {\r\n        top: 'auto',\r\n        bottom: 0,\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    fabButton: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        top: -30,\r\n        left: 0,\r\n        right: 0,\r\n        margin: '0 auto',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1, 10, 1, 0),\r\n        fontFamily: 'Vazir',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: theme.spacing(1, 5, 1, 0),\r\n        },\r\n    },\r\n    buttonApp: {\r\n        margin: theme.spacing(1, 0, 1, 10),\r\n        fontFamily: 'Vazir',\r\n        color: '#3f51b5',\r\n        backgroundColor: '#ffffff',\r\n        '&:hover': {\r\n            backgroundColor: '#ffffff',\r\n            color: '#c51162',\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: theme.spacing(1, 0, 1, 5),\r\n        },\r\n    },\r\n\r\n}));\r\n\r\nconst Navbar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n\r\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Button variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n                        درباره من\r\n                    </Button>\r\n                    <Fab color=\"secondary\" aria-label=\"add\" className={classes.fabButton}>\r\n                        <Refresh />\r\n                    </Fab>\r\n                    <div className={classes.grow} />\r\n\r\n                    <Button startIcon={<GetAppRounded />} className={classes.buttonApp} variant=\"contained\" color=\"default\">\r\n                        نصب اپلیکیشن\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    );\r\n};\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Header from '../elemenets/Header';\r\nimport Navbar from '../elemenets/Navbar';\r\n\r\nconst Layout = ({ children }) => {\r\n    return (\r\n\r\n        <>\r\n            <CssBaseline />\r\n            <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n                <Header />\r\n                {children}\r\n                <Navbar />\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\nLayout.propTypes = {\r\n\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node,\r\n    ]).isRequired,\r\n};\r\nexport default Layout;\r\n","import React from 'react';\r\nimport Layout from '../../layouts';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Layout>\r\n        test\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from './components/screens/home';\r\n\r\nfunction App() {\r\n  return (\r\n   <Router>\r\n     <Route path=\"/\" component={Home} />\r\n   </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}